#DockerToolboxインストール
brew search docker
brew cask install docker-toolbox

#Dockerコマンドでイメージ作成からコンテナ起動まで
https://kitsune.blog/docker-command
dockerコマンド
#仮想マシン確認
docker-machine ls
#Dockerイメージの確認
docker images
#Dockerイメージの検索
docker search [オプション] [ キーワード ]
※使い方の実例
mysqlのイメージを検索
docker search mysql
オプションの使い方
★３つ以上で、公式のイメージのみを検索
docker search --filter "stars=3" --filter "is-official=true" mysql
公式リファレンスURL
http://docs.docker.jp/engine/reference/commandline/search.html

#Dockerコンテナの作成
「-it」…ホストとコンテナの標準入出力を繋げる
「-d」…バックグラウンドで実行
「-p」…「ホストマシンのポート：コンテナのポート」でポートフォワード（転送）
「--name」…コンテナに名前をつける
# CentOS7のコンテナを作成
docker run -it -d -p 8080:80 --name centos centos:7
#Dockerコンテナに接続（ログイン）
docker exec -it centos bash
#yumでNginxのリポジトリをインストール
yum localinstall -y http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm
#yumでNginxをインストール
yum install -y nginx
#Nginxを起動
nginx

#起動中のコンテナを確認
docker ps
#すべてのコンテナ表示
docker ps -a
#Dockerコンテナを起動
docker start centos
#Dockerコンテナを停止
docker stop centos

#Dockerイメージを作成
docker commit centos original-nginx
#作成したイメージからコンテナを作成し起動
docker run -it -d -p 8181:80 --name original-nginx original-nginx
#「original-nginx」コンテナにログイン
docker exec -it original-nginx bash
#Nginxがインストールされていることを確認
nginx -v

#nginxコンテナをダウンロード及び起動する
docker pull docker.io/nginx
#-p：ポートフォワードを行う
※Dockerホストマシンの8000番ポートが、nginx-latestコンテナの80番ポートにつながる
docker run -d -p 8000:80 --name nginx-latest docker.io/nginx:latest
#nginxコンテナにアクセス確認してみる
curl http://localhost:8000/index.html
#nginxログの確認
-fをつけることでtail- fのような見方ができる
docker logs -f nginx-latest

＃Nginxのイメージをダウンロード
docker pull nginx
#nginxの起動
docker run --name [コンテナ名] -d -p [ホスト側のポート番号]:[コンテナ側のポート番号] [イメージ名]
–name で　任意のコンテナ名を指定。-d はコンテナをバックグラウンドで実行。-p はコンテナのポートに、ホストのポートからアクセスできるようにする。
docker run --name nginx00 -d -p 8080:80 nginx:latest
#ブラウザからアクセス
http://localhost:8080
#フォルダマウント
「-v」はコンテナにボリュームを割り当てる
「/Users/ユーザー名/web:/usr/share/nginx/html:ro」の「/Users/ユーザー名/web」がホスト側（ローカルpc）のパス、
「/usr/share/nginx/html」が Dcoker の Nginx 側のパス。
よってホストの「/usr/share/nginx/html」に置かれるファイル群は、
あたかも「/usr/share/nginx/html」に置かれたかのように機能する。
ちなみに「ro」というのはリードオンリー（つまり）読み取り専用であることを示す。
docker run --name hello-nginx -v /Users/ユーザー名/web:/usr/share/nginx/html:ro -d -p 8080:80 nginx
