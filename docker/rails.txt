Ruby on Rails構築
https://mseeeen.msen.jp/rails-docker/
https://rightcode.co.jp/blog/information-technology/docker-rails-environment-setup-syain

フォルダ及びファイル作成
mkdir rails
cd rails
touch {Dockerfile,docker-compose.yml,Gemfile,Gemfile.lock,entrypoint.sh}

ファイルの編集
※Gemfile.lock は書き換えなくておk
・Dockerfile編集
FROM ruby:3.1

RUN apt update -qq && apt install -y postgresql-client
RUN mkdir /myapp
WORKDIR /myapp
COPY Gemfile /myapp/Gemfile
COPY Gemfile.lock /myapp/Gemfile.lock
RUN bundle install
COPY . /myapp

COPY entrypoint.sh /usr/bin/
RUN chmod +x /usr/bin/entrypoint.sh
ENTRYPOINT ["entrypoint.sh"]
EXPOSE 3000

CMD ["rails", "server", "-b", "0.0.0.0"]

Dockerfile は Docker イメージを作成するために必要なパッケージやアプリ、各種設定を指定するファイル
なお、 Rails 7 では Webpacker が標準では組み込まれなくなった影響で yarn や Node.js のインストールが不要になった
そのため、 Ruby 以外は PostgreSQL のみをインストールするようにしている

・docker-compose.yml編集
version: "3.9"
services:
  db:
    image: postgres
    volumes:
      - ./tmp/db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: password
  web:
    build: .
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -p 3000 -b '0.0.0.0'"
    volumes:
      - .:/myapp
    ports:
      - "3000:3000"
    depends_on:
      - db

docker-compose.yml は複数の Docker コンテナーを定義するためのファイル
今回はデータベース用の db と Rails アプリ用の web を定義している

・Gemfile編集
source 'https://rubygems.org'
gem 'rails', '~> 7.0.2'

Gemfile は Ruby と各種パッケージのバージョン管理するためのファイル
Ruby は最新版、 Rails は 7.0.2 以上を指定

・entrypoint.sh編集
#!/bin/bash
set -e

rm -f /myapp/tmp/pids/server.pid

exec "$@"

entrypoint.sh は特定のファイルがすでに存在する場合にサーバーを再起動できない Rails 固有の問題を修正するためのスクリプト

ビルド・コンテナーの起動
docker-compose build
次は docker-compose コマンドを使って rails new を実行し、 Rails プロジェクトを作成
docker-compose run に続けてサービス名を指定し、さらにコンテナー内で実行したいコマンドを続けていく
Rails が動くサービスには web という名前を docker-compose.yml で付けたのでコマンドでのコンテナー名としては web を当てはめる

Railsプロジェクト生成コマンド
docker-compose run web rails new . --force --no-deps --database=postgresql

・データベース作成
コンテナー上で利用するデータベースを作成
config/database.yml に以下の内容を貼り付け
・config/database.yml
default: &default
  adapter: postgresql
  encoding: unicode
  host: db
  username: postgres
  password: password
  pool: 5

development:
  <<: *default
  database: myapp_development

test:
  <<: *default
  database: myapp_test

書き換えが終わったら、以下のコマンドを実行して、データベースを作成
データベース作成コマンド
docker-compose run web rails db:create

・コンテナーを起動
最後にコンテナーを起動するため、次のコマンドを実行
docker-compose up -d

docker-compose up は docker-compose.yml に基づいて起動するコマンド
コンテナー起動時にコンテナー内で実行させたいコマンドは Dockerfile で設定しているので、コンテナーを起動させると Rails サーバーが立ち上がる
また、オプションの -d を付けるとバックグラウンドで起動させることができる

・動作確認
これで無事に Rails の開発用サーバーが起動した事になる
ブラウザのアドレスバーに http://localhost:3000/ と入力し、起動を確認
以下の画像のような画面が出れば成功
