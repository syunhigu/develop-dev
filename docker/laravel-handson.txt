#build & up
docker compose up -d --build
#コンテナ一覧を表示
docker compose ps
#作成したappコンテナログイン
docker compose exec app bash
#PHPのバージョン確認
php -v
#Composerのバージョン確認
composer -V
#PHPのバージョン確認(コンテナの外からコマンド実行)
docker compose exec [サービス名] [実行したいコマンド]
docker compose exec app php -v
#Laravelをインストールする
docker compose exec app bash
composer create-project --prefer-dist "laravel/laravel=8.*" .
php artisan -V
#マイグレーション実行(エラーが発生)
docker compose exec app bash
php artisan migrate
#backend/.env のDB接続設定を修正する。
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=laravel_local
DB_USERNAME=phper
DB_PASSWORD=secret
#backend/.env.example も同様にDB接続設定を修正しておく
DB_CONNECTION=mysql
DB_HOST=db
DB_PORT=3306
DB_DATABASE=laravel_local
DB_USERNAME=phper
DB_PASSWORD=secret
#マイグレーション実行(再実行)
docker compose exec app bash
php artisan migrate
#試しにデータを作ってみる
docker compose exec app bash
php artisan tinker
$user = new App\Models\User();
$user->name = 'phper';
$user->email = 'phper@example.com';
$user->password = Hash::make('secret');
$user->save();
exit
docker compose exec db bash
mysql -u $MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE
SELECT * FROM users;
exit
#コンテナの停止、ネットワーク・名前付きボリューム・コンテナイメージ、未定義コンテナを削除
docker-compose down --rmi all --volumes --remove-orphans
#GitHubからリポジトリをクローン
git clone git@github.com:syunhigu/develop-dev.git
cd docker/laravel-handson
docker compose up -d --build
#Laravelインストール
docker compose exec app bash
composer install
#.env.example を元にコピーして.env 環境変数ファイル作成
cp .env.example .env
#アプリケーションキーを生成
php artisan key:generate
#public/storage から storage/app/public へのシンボリックリンクを張る
#システムで生成したファイル等をブラウザからアクセスできるよう公開するため
php artisan storage:link
#storage, bootstrap/cache はフレームワークからファイル書き込みが発生するので、書き込み権限を与える必要がある
chmod -R 777 storage bootstrap/cache
#マイグレーション実行
php artisan migrate

#オマケ
#MySQLに接続したい
#マイグレーションが実行されるとLaravel側で最初から用意されている users, password_resets のテーブルが生成されている
docker-compose exec db bash -c 'mysql -u${MYSQL_USER} -p${MYSQL_PASSWORD} ${MYSQL_DATABASE}'
show tables;
desc users;

#Laravelのログをコンテナログに表示する
#backend/.env を修正
LOG_CHANNEL=stderr
#backend/routes/web.php
Route::get('/', function () {
    logger('welcome route.');
    return view('welcome');
});
#ログ表示
docker compose logs
# -f でログウォッチ
docker compose logs -f
# サービス名を指定してログを表示
docker compose logs -f app
#MySQLクライアントツールで接続したい
#docker-compose.yml の db サービスに下記設定を追記して、コンテナを再起動して設定を反映
    ports:
      - 33060:3306
