#gitクローン
#クローンしたいフォルダに移動
cd フォルダ
git clone https://github.com/syunhigu/develop-dev.git
#ローカルのブランチからブランチを作成する方法
#ブランチ一覧表示
git branch -a
#リモートブランチの一覧を表示
git branch --remote
#ブランチを作る元のブランチに切り替える
git checkout master
#ブランチを作成
git checkout -b 作成するブランチ名
#ブランチをリモートに登録
git push -u origin 作成したブランチ名

#リモートブランチから作る方法
#リモートブランチからローカルブランチを作成
git checkout -b ローカルに作成するブランチ名 origin/作成元のリモートのブランチ名
#ブランチ一覧表示
git branch -a
#ブランチをリモートに登録
git push -u origin 作成したブランチ

#リモートリポジトリに登録する方法
※あらかじめリモートリポジトリを作成してある場合
#対象フォルダ配下でローカルリポジトリ作成
git init
git branch -m master
#push対象ファイルをインデックスに追加
git add xxx
#コミット
git commit -m "xxx"
#リモートリポジトリに追加
git remote add origin https://github.com/ユーザーID/リモートリポジトリ名.git
git remote add origin git@github.com:ユーザーID/リモートリポジトリ名.git
#リモートリポジトリにpush
git push -u origin master

------------------------------------
#コミット
#変更したファイルの一覧を確認
git status
※メッセージ内容
・modified:修正したファイル
・deleted:削除したファイル
・Untracked files:新規作成したファイル
#変更したファイルのソースコードを確認
git diff
#変更点に問題なければコミット
#コミットしたいファイルを選択
git add xxx
※例
git add app/scripts/controllers/kakugenctrl.js
#消す対象のファイルをコミット対象とする時
git rm app/scripts/controllers/detail.jsbk
#git管理下にある複数のファイルをrmしたときに、それらを一括してgit rmしたい場合
git rm `git ls-files --deleted`
#ディレクトリ単位でコミットしたい時は以下のようにディレクトリ指定も可能
git add ./
#コミット対象を確認する
git status
#コミットする
git commit
#m オプションを使用するとコメントを同時にセットできる
git commit -m"feature/58" -m"格言画面へ飛ぶように修正"`
#githubへpush
git push origin xxx

------------------------------------
#push前に直前のコミットをなかったことにする方法
#ローカルリポジトリ内で下記コマンドを実行して直前のコミットをなかったことにしてソースの状態も直前のコミットのをする前の状態に戻す。
git reset --hard HEAD^
#ローカルリポジトリ内で下記コマンドを実行して直前のコミットをなかったことにしてソースはそのままにする。
git reset --soft HEAD^

------------------------------------
#マージしたい時
#masterブランチにマージするとき
# masterブランチに移動
git checkout master
# masterブランチにfeatureブランチをマージします
git merge feature/58
#コミットする　※必要に応じて
git commit -m "feature/58"
#githubへpush
git push origin xxx

------------------------------------
#マージしたけどやっぱりやめたい時のやり方
#その1 「マージしたらコンフリクトした。やっぱりやめよう。」
git merge --abort
#その2 「マージしたらコンフリクトした。コンフリクトを解消しようといろいろ編集した。でもやっぱりやめよう。」
git reset --hard HEAD
#その3 「マージすべて完了した。でもやっぱりやめよう。」パート1
git revert -m 1 <merge_commit>
マージコミットの場合、親が2つに分かれる。
revertコマンドを使う場合は、revertした結果どちらの親に戻すのかを-m 数字で指定する。数字が親を表す。
詳しくはこちらの記事参照
https://qiita.com/chihiro/items/2fa827d0eac98109e7ee
※この方法の場合、取り消したマージコミットに含まれていた変更を再度マージすることはできなくなる。
#その3 「マージすべて完了した。でもやっぱりやめよう。」パート2
git reset --hard ORIG_HEAD
マージが完了(コミットまで)したけれども、やっぱりマージ前に戻したい、というとき、パート2。
※この方法は一度できたコミットを取り消すことになる。
revertコマンドとは違い、「コミットを取り消した」という履歴も残らない。

------------------------------------
#ローカルブランチ削除
git branch --delete develop
#ローカルブランチ強制削除
git branch -D develop
#リモートブランチ削除
git push --delete origin develop
